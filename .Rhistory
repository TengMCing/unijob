install.packages("rvest")
url <- "https://careers.pageuppeople.com/513/cw/en/listing/?page-items=200"
rvest::read_html(url)
rvest::read_html(url) |>
rvest::html_elements("a.job-link")
url <- "https://careers.pageuppeople.com/513/cw/en/listing/?page-items=200"
page <- rvest::read_html(url)
position <- rvest::html_elements(page, "a.job-link")
position
rvest::html_attr(position, "href")
position_text <- rvest::html_text2(position)
position_text
rvest::html_elements(page, "tr.summary")
rvest::html_elements(page, "tr.summary") |>
rvest::html_text2()
rvest::html_elements(page, "tr td")
rvest::html_elements(page, "tr:nth-child(3)") |>
rvest::html_text2()
rvest::html_elements(page, "tr td:nth-child(3)") |>
rvest::html_text2()
rvest::html_elements(page, "tr > td:nth-child(3)") |>
rvest::html_text2()
rvest::html_elements(page, "tr td:nth-child(3)") |>
rvest::html_text2()
position_close <- rvest::html_elements(page, "tr td:nth-child(4)") |>
rvest::html_text2()
position_close
monash <- function() {
base_url <- "https://careers.pageuppeople.com"
url <- "https://careers.pageuppeople.com/513/cw/en/listing/?page-items=200"
page <- rvest::read_html(url)
position <- rvest::html_elements(page, "a.job-link")
position_link <- glue::glue("{base_url}{rvest::html_attr(position, 'href')}")
position_text <- rvest::html_text2(position)
position_summary <- rvest::html_elements(page, "tr.summary") |>
rvest::html_text2()
position_location <- rvest::html_elements(page, "span.location") |>
rvest::html_text2()
position_salary <- rvest::html_elements(page, "tr td:nth-child(3)") |>
rvest::html_text2()
position_close <- rvest::html_elements(page, "tr td:nth-child(4)") |>
rvest::html_text2()
tibble::tibble(position = position_text,
close_date = position_close,
url = position_link,
summary = position_summary,
location = position_location,
salary = position_salary)
}
monash()
monash() |> View()
monash() -> x
x$close_date
gsub("\\d+ \\w \\d{4}", x$close_date)
gsub("(\\d{1,2} \\w{3} \\d{4})", "\\1", x$close_date)
gsub("(\\d{1,2})", "\\1", x$close_date)
?gsub("(\\d{1,2})", "\\1", x$close_date)
gsub("(\\d)", "\\1", x$close_date)
grepl("\\d", x$close_date)
gsub("(\\d)", "\\1", x$close_date)
gsub("(JAN)", "\\1", x$close_date)
gsub("(Jan)", "\\1", x$close_date)
?gsub("(Jan)", "\\1", x$close_date)
gsub("(a)", "\\1_\\1", x$close_date)
gsub("(\\d)", "\\1_\\1", x$close_date)
gsub("(\\d)", "\\1", x$close_date)
gsub(".* (\\d{1,2} \\w{3} \\d{4})", "\\1", x$close_date)
gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date)
gsub(".*(\\d{1,2} \\w{3} \\d{4}).*", "\\1", x$close_date)
as.Date(gsub(".*(\\d{1,2} \\w{3} \\d{4}).*", "\\1", x$close_date))
?as.Date
as.Date(gsub(".*(\\d{1,2} \\w{3} \\d{4}).*", "\\1", x$close_date),)
as.Date(gsub(".*(\\d{1,2} \\w{3} \\d{4}).*", "\\1", x$close_date), tryFormats = c("%d %m %Y"))
gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date)
as.Date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date))
lubridate::as_datetime(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date))
lubridate::as_date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date))
?lubridate::as_date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date))
lubridate::parse_date_time(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date))
as.Date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date), tryFormats = c("%e %b %Y"))
x
x$salary
?strsplit()
strsplit(x$salary, "$")
strsplit(x$salary, ",")
strsplit(x$salary, "\\$")
strsplit(x$salary, "\\$.* ")
?regmatches()
gregexpr("$.* ", x$salary)
regmatches(x$salary, gregexpr("$.* ", x$salary))
regmatches(x$salary, gregexpr("$1* ", x$salary))
regmatches(x$salary, gregexpr("\\$1* ", x$salary))
x$salary
regmatches(x$salary, gregexpr("(\\$1* )", x$salary))
regmatches(x$salary, gregexpr("(\\$1.* )", x$salary))
regmatches(x$salary, gregexpr("(\\$1[\\d,]* )", x$salary))
regmatches(x$salary, gregexpr("(\\$1[\\d,]+ )", x$salary))
regmatches(x$salary, gregexpr("(\\$1[\\d]+ )", x$salary))
regmatches(x$salary, gregexpr("(\\$1[\\d]+)", x$salary))
regmatches(x$salary, gregexpr("(\\$\\d+)", x$salary))
regmatches(x$salary, gregexpr("(\\$[\\d,]+)", x$salary))
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary))
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
tibble::as_tibble()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
as.data.frame()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA_character_, NA_character_)))
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA_character_, NA_character_)) else return(x))
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA_character_, NA_character_)) else return(x)) |>
as.data.frame()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA, NA)) else return(x)) |>
as.data.frame()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA, NA)) else return(x)) |>
t()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA, NA)) else return(x)) |>
t() |>
as.data.frame()
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
lapply(function(x) if (length(x) == 0) return(c(NA, NA)) else return(x))
tibble::tibble(c(NA, NA))
tibble::tibble(c(lower = NA, upper = NA))
tibble::tibble(lower = NA, upper = NA)
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(lower = NA, upper = NA))
} else {
names(x) <- c("lower", "upper")
return(tibble::as_tibble(as.list(x)))
}
})
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(lower = NA, upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "lower"
} else {
names(x) <- c("lower", "upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(lower = NA, upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(lower = NA, upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(salary_lower = NA, salary_upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
?|>
?`|>`
regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(salary_lower = NA, salary_upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
}) |>
cbind(x, _)
?cbind
salary_detail <- regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(salary_lower = NA, salary_upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
cbind(x, salary_detail)
clean_monash <- function(x) {
x$close_date <- as.Date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date),
tryFormats = c("%e %b %Y"))
salary_detail <- regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(salary_lower = NA, salary_upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
x <- cbind(x, salary_detail)
return(x)
}
monash <- function() {
base_url <- "https://careers.pageuppeople.com"
url <- "https://careers.pageuppeople.com/513/cw/en/listing/?page-items=200"
page <- rvest::read_html(url)
position <- rvest::html_elements(page, "a.job-link")
position_link <- glue::glue("{base_url}{rvest::html_attr(position, 'href')}")
position_text <- rvest::html_text2(position)
position_summary <- rvest::html_elements(page, "tr.summary") |>
rvest::html_text2()
position_location <- rvest::html_elements(page, "span.location") |>
rvest::html_text2()
position_salary <- rvest::html_elements(page, "tr td:nth-child(3)") |>
rvest::html_text2()
position_close <- rvest::html_elements(page, "tr td:nth-child(4)") |>
rvest::html_text2()
tibble::tibble(position = position_text,
close_date = position_close,
url = position_link,
summary = position_summary,
location = position_location,
salary = position_salary) |>
clean_monash()
}
monash() |> View()
monash <- function() {
base_url <- "https://careers.pageuppeople.com"
url <- "https://careers.pageuppeople.com/513/cw/en/listing/?page-items=200"
page <- rvest::read_html(url)
position <- rvest::html_elements(page, "a.job-link")
position_link <- glue::glue("{base_url}{rvest::html_attr(position, 'href')}")
position_text <- rvest::html_text2(position)
position_summary <- rvest::html_elements(page, "tr.summary") |>
rvest::html_text2()
position_location <- rvest::html_elements(page, "span.location") |>
rvest::html_text2()
position_salary <- rvest::html_elements(page, "tr td:nth-child(3)") |>
rvest::html_text2()
position_close <- rvest::html_elements(page, "tr td:nth-child(4)") |>
rvest::html_text2()
tibble::tibble(organization = "Monash University",
position = position_text,
close_date = position_close,
url = position_link,
summary = position_summary,
location = position_location,
salary = position_salary) |>
clean_monash()
}
clean_monash <- function(x) {
x$close_date <- as.Date(gsub(".* (\\d{1,2} \\w{3} \\d{4}) .*", "\\1", x$close_date),
tryFormats = c("%e %b %Y"))
salary_detail <- regmatches(x$salary, gregexpr("(\\$[0-9,]+)", x$salary)) |>
purrr::map_df(function(x) {
if (length(x) == 0) {
return(tibble::tibble(salary_lower = NA, salary_upper = NA))
} else {
if (length(x) == 1) {
names(x) <- "salary_lower"
} else {
names(x) <- c("salary_lower", "salary_upper")
}
return(tibble::as_tibble(as.list(x)))
}
})
x <- cbind(x, salary_detail)
return(x)
}
monash()
monash() |> View()
